name: Deploy & Watch Certificate

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to deploy"
        required: false
        default: "main"
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION || 'europe-north1' }}
  DOMAIN: ${{ vars.CUSTOM_DOMAIN || 'api.paranoidmodels.com' }}
  CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
  CURSOR_API_BASE: ${{ vars.CURSOR_API_BASE || 'https://api.openai.com/v1' }}
  CURSOR_MODEL: ${{ vars.CURSOR_MODEL || 'gpt-4o' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Python (for any build/test)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Node (for web build if needed)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build Newswire UI
        if: ${{ hashFiles('web/package.json') != '' }}
        working-directory: web
        run: |
          npm install
          npm run build

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Ensure gcloud beta component is available
        run: |
          gcloud components install beta -q || true

      - name: Deploy to Cloud Run
        run: |
          chmod +x scripts/deploy_cloud_run.sh
          ./scripts/deploy_cloud_run.sh

      - name: Normalize + build feeds
        run: |
          python3 scripts/normalize_enriched.py || true
          python3 scripts/build_trends_feeds.py || true

      - name: Smoke test (prod)
        run: |
          chmod +x scripts/smoke.sh
          ORIGIN="${{ vars.PROD_API_ORIGIN || secrets.PROD_API_ORIGIN || 'https://api.paranoidmodels.com' }}" scripts/smoke.sh

      # Valinnainen: odota serttiä/watcheri hoitaa, mutta tehdään kevyt health-probe
      - name: Pick E2E base URL (custom-domain first)
        id: pick-base
        env:
          CUSTOM_DOMAIN: ${{ vars.CUSTOM_DOMAIN }}
          CLOUD_RUN_URL: ${{ vars.CLOUD_RUN_URL }}
        run: |
          set -e
          pick_url() {
            URL="$1"
            if [ -z "$URL" ]; then return 1; fi
            echo "Probing $URL/health ..."
            # 10 yritystä, 6s välein
            for i in $(seq 1 10); do
              if curl -fsS "$URL/health" >/dev/null 2>&1; then
                echo "::notice::Health OK at $URL"
                echo "E2E_BASE_URL=$URL" >> $GITHUB_OUTPUT
                return 0
              fi
              sleep 6
            done
            return 1
          }
          # yritä custom-domain ensin (https), sitten Cloud Run URL
          if [ -n "$CUSTOM_DOMAIN" ]; then
            pick_url "https://$CUSTOM_DOMAIN" || true
          fi
          if [ -z "${E2E_BASE_URL:-}" ]; then
            pick_url "${CLOUD_RUN_URL}" || true
          fi
          if [ -z "${E2E_BASE_URL:-}" ]; then
            echo "::warning::Neither domain nor Cloud Run URL passed health probe; skipping E2E."
            echo "skip_e2e=true" >> $GITHUB_OUTPUT
          else
            echo "skip_e2e=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js 20 for web E2E
        if: steps.pick-base.outputs.skip_e2e == 'false' && hashFiles('web/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Install web deps + Playwright
        if: steps.pick-base.outputs.skip_e2e == 'false' && hashFiles('web/package.json') != ''
        working-directory: web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E smoke (/newswire)
        if: steps.pick-base.outputs.skip_e2e == 'false' && hashFiles('web/package.json') != ''
        working-directory: web
        env:
          E2E_BASE_URL: ${{ steps.pick-base.outputs.E2E_BASE_URL }}
          # Playwright trace aina failureen
          PWDEBUG: '0'
        run: |
          echo "Running smoke against $E2E_BASE_URL"
          npx playwright test tests/e2e/newswire.smoke.spec.ts --reporter=list

      - name: Upload Playwright traces (if any)
        if: failure() && hashFiles('web/package.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: web/test-results

      - name: Upload Newswire 404 snapshot (always)
        if: hashFiles('web/test-artifacts/newswire-404/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: newswire-404-snapshot
          path: web/test-artifacts/newswire-404/*

  post-deploy-enrich-smoke:
    name: Post-deploy enrich smoke
    needs: deploy
    if: >
      ${{ needs.deploy.result == 'success' && vars.USE_GPT5 == 'true' && secrets.CURSOR_API_KEY != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare demo signal if missing
        run: |
          mkdir -p artifacts
          if [ ! -f artifacts/signal.raw.json ]; then
            echo '{"id":"deploy-smoke","category":"economy","signal":"post-deploy check","severity":"low","ts":"'"$(date -u +%FT%TZ)"'"}' > artifacts/signal.raw.json
          fi

      - name: Enrich
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          CURSOR_API_BASE: ${{ vars.CURSOR_API_BASE }}
          CURSOR_MODEL: ${{ vars.CURSOR_MODEL || 'gpt-5' }}
          USE_GPT5: "true"
        run: |
          make enrich
          test -s artifacts/report.enriched.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: post-deploy-enriched-report
          path: artifacts/report.enriched.json
          if-no-files-found: warn
          retention-days: 7

      - name: Notify Slack (success)
        if: success() && secrets.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          sha=$(git rev-parse --short HEAD)
          python - <<'PY' > /tmp/enrich_summary.env
          import json, pathlib
          p = pathlib.Path('artifacts/report.enriched.json')
          summary, lede = 'Newswire', '—'
          if p.exists():
              d = json.loads(p.read_text())
              if isinstance(d, list):
                  d = d[0] if d else {}
              summary = (d.get('kicker') or d.get('category') or summary)[:80]
              lede_txt = (d.get('lede') or d.get('summary') or '')
              lede = ' '.join(str(lede_txt).split())[:280] or lede
          print(f"SUMMARY={summary}")
          print(f"LEDE={lede}")
          PY
          source /tmp/enrich_summary.env
          curl -X POST -H 'Content-type: application/json' \
            --data "$(jq -nc --arg s "$sha" --arg sum "$SUMMARY" --arg le "$LEDE" --arg repo "$GITHUB_REPOSITORY" --arg run "$GITHUB_RUN_ID" '{text: ("✅ Post-deploy enrich OK ("+$s+")\n*"+$sum+"* — "+$le+"\nRun: https://github.com/"+ $repo + "/actions/runs/" + $run + "\nArtifact: post-deploy-enriched-report")}')" \
            "$SLACK_WEBHOOK_URL"

      - name: Notify Slack (failure)
        if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          sha=$(git rev-parse --short HEAD)
          python - <<'PY' > /tmp/enrich_summary.env
          import json, pathlib
          p = pathlib.Path('artifacts/report.enriched.json')
          summary, lede = 'Newswire', '—'
          if p.exists():
              d = json.loads(p.read_text())
              if isinstance(d, list):
                  d = d[0] if d else {}
              summary = (d.get('kicker') or d.get('category') or summary)[:80]
              lede_txt = (d.get('lede') or d.get('summary') or '')
              lede = ' '.join(str(lede_txt).split())[:280] or lede
          print(f"SUMMARY={summary}")
          print(f"LEDE={lede}")
          PY
          source /tmp/enrich_summary.env
          curl -X POST -H 'Content-type: application/json' \
            --data "$(jq -nc --arg s "$sha" --arg sum "$SUMMARY" --arg le "$LEDE" --arg repo "$GITHUB_REPOSITORY" --arg run "$GITHUB_RUN_ID" '{text: ("❌ Post-deploy enrich FAILED ("+$s+")\n*"+$sum+"* — "+$le+"\nRun: https://github.com/"+ $repo + "/actions/runs/" + $run)}')" \
            "$SLACK_WEBHOOK_URL"

      - name: Notify Telegram (success)
        if: success() && secrets.TG_BOT_TOKEN != '' && secrets.TG_CHAT_ID != ''
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          sha=$(git rev-parse --short HEAD)
          python - <<'PY' > /tmp/enrich_summary.env
          import json, pathlib
          p = pathlib.Path('artifacts/report.enriched.json')
          summary, lede = 'Newswire', '—'
          if p.exists():
              d = json.loads(p.read_text())
              if isinstance(d, list):
                  d = d[0] if d else {}
              summary = (d.get('kicker') or d.get('category') or summary)[:80]
              lede_txt = (d.get('lede') or d.get('summary') or '')
              lede = ' '.join(str(lede_txt).split())[:280] or lede
          print(f"SUMMARY={summary}")
          print(f"LEDE={lede}")
          PY
          source /tmp/enrich_summary.env
          esc() { python - "$1" <<'PY'
import sys, re
s=sys.argv[1]
print(re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\\\1', s))
PY
          }
          S="$(esc "${SUMMARY:-Newswire}")"
          L="$(esc "${LEDE:-—}")"
          TEXT=$(printf '✅ Post-deploy enrich OK (%s)\n*%s* — %s\nRun: https://github.com/%s/actions/runs/%s\nArtifact: post-deploy-enriched-report' "$sha" "$S" "$L" "$GITHUB_REPOSITORY" "$GITHUB_RUN_ID")
          curl -s "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${TEXT}" \
            --data-urlencode "parse_mode=MarkdownV2" > /dev/null

  post-deploy-ui-smoke:
    name: UI smoke (Playwright @ prod)
    needs: [deploy]
    if: ${{ needs.deploy.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PROD_URL: https://fertility-api-2q3ac3ofma-lz.a.run.app
      CI: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps (with Playwright)
        working-directory: web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run prod smoke
        working-directory: web
        env:
          PROD_URL: ${{ env.PROD_URL }}
        run: |
          npx playwright test tests/e2e/prod.newswire.spec.ts --reporter=line --retries=1

      - name: Upload Playwright artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-smoke-artifacts
          path: |
            web/playwright-report/**
            web/test-results/**
          if-no-files-found: ignore

      - name: Notify (UI smoke failure)
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          python3 scripts/notify_manual.py --run-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" || true

      - name: Notify Telegram (failure)
        if: failure() && secrets.TG_BOT_TOKEN != '' && secrets.TG_CHAT_ID != ''
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          sha=$(git rev-parse --short HEAD)
          python - <<'PY' > /tmp/enrich_summary.env
          import json, pathlib
          p = pathlib.Path('artifacts/report.enriched.json')
          summary, lede = 'Newswire', '—'
          if p.exists():
              d = json.loads(p.read_text())
              if isinstance(d, list):
                  d = d[0] if d else {}
              summary = (d.get('kicker') or d.get('category') or summary)[:80]
              lede_txt = (d.get('lede') or d.get('summary') or '')
              lede = ' '.join(str(lede_txt).split())[:280] or lede
          print(f"SUMMARY={summary}")
          print(f"LEDE={lede}")
          PY
          source /tmp/enrich_summary.env
          esc() { python - "$1" <<'PY'
import sys, re
s=sys.argv[1]
print(re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\\\1', s))
PY
          }
          S="$(esc "${SUMMARY:-Newswire}")"
          L="$(esc "${LEDE:-—}")"
          TEXT=$(printf '❌ Post-deploy enrich FAILED (%s)\n*%s* — %s\nRun: https://github.com/%s/actions/runs/%s' "$sha" "$S" "$L" "$GITHUB_REPOSITORY" "$GITHUB_RUN_ID")
          curl -s "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${TEXT}" \
            --data-urlencode "parse_mode=MarkdownV2" > /dev/null

  post-deploy-ui-smoke:
    name: UI Smoke (post-deploy)
    needs: [deploy]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        envset:
          - name: production
            url: ${{ vars.PROD_URL || 'https://api.paranoidmodels.com' }}
          - name: staging
            url: ${{ vars.STAGING_URL || '' }}   # jätä tyhjäksi jos ei käytössä
    env:
      PROD_URL: ${{ matrix.envset.url }}
      ENV_NAME: ${{ matrix.envset.name }}
    steps:
      - name: Skip if URL empty
        if: ${{ env.PROD_URL == '' }}
        run: echo "No URL for $ENV_NAME, skipping." && exit 0

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Puppeteer
        working-directory: web
        run: npm i puppeteer

      - name: Run Puppeteer smoke (${{ env.ENV_NAME }})
        id: smoke
        working-directory: web
        shell: bash
        timeout-minutes: 5
        run: |
          echo "ENV=${ENV_NAME} PROD_URL=${PROD_URL}"
          mkdir -p artifacts
          node tests/e2e/prod.newswire.smoke.cjs 2>&1 | tee "artifacts/ui-smoke_${ENV_NAME}.log"

      - name: Upload smoke artifacts (${{ env.ENV_NAME }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-smoke-post-deploy-${{ env.ENV_NAME }}
          path: |
            web/artifacts/ui-smoke_${{ env.ENV_NAME }}.log
          if-no-files-found: ignore

      - name: Failure notify (Slack/TG) — ${{ env.ENV_NAME }}
        if: failure()
        run: |
          python3 scripts/notify_manual.py \
            --run-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --extra "env=${ENV_NAME}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TG_BOT_TOKEN:      ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:        ${{ secrets.TG_CHAT_ID }}
          NOTIFY_DRY_RUN:    ${{ vars.NOTIFY_DRY_RUN || '' }}
